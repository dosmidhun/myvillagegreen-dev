<script>
  //Shopify.Image.preload({{ product.images | json }}, 'grande');

  {% if section.settings.display_subtotal and product.available %} 
  //update price when changing quantity
  function updatePricing() {
    //try pattern one before pattern 2
    var regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;
    var unitPriceTextMatch = jQuery('.product .price').text().match(regex);
   
    if (!unitPriceTextMatch) {
      regex = /([0-9]+[.|,][0-9]+)/g;
      unitPriceTextMatch = jQuery('.product .price').text().match(regex);     
    }
   
    if (unitPriceTextMatch) {
      var unitPriceText = unitPriceTextMatch[0];     
      var unitPrice = unitPriceText.replace(/[.|,]/g,'');
      var quantity = parseInt(jQuery('#quantity').val());
      var totalPrice = unitPrice * quantity;

      var totalPriceText = Shopify.formatMoney(totalPrice, window.money_format);
      regex = /([0-9]+[.|,][0-9]+[.|,][0-9]+)/g;     
      if (!totalPriceText.match(regex)) {
        regex = /([0-9]+[.|,][0-9]+)/g;
      } 
      totalPriceText = totalPriceText.match(regex)[0];

      var regInput = new RegExp(unitPriceText, "g"); 
      var totalPriceHtml = jQuery('.product .price').html().replace(regInput ,totalPriceText);

      jQuery('.product .total-price span').html(totalPriceHtml);     
    }
  }

  jQuery('#quantity').on('change', updatePricing);
  {% endif %}
  
var selectCallback = function(variant, selector) {

  var addToCart = jQuery('#product-add-to-cart'),
      productPrice = jQuery('.product .price'),
      comparePrice = jQuery('.product .compare-price');  
  
  if (variant) {
    if (variant.available) {
      // We have a valid product variant, so enable the submit button
      addToCart.removeClass('disabled').removeAttr('disabled').val(window.inventory_text.add_to_cart);

    } else {
      // Variant is sold out, disable the submit button
      addToCart.val(window.inventory_text.sold_out).addClass('disabled').attr('disabled', 'disabled');
    }

    // Regardless of stock, update the product price
    productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    // Also update and show the product's compare price if necessary
    if ( variant.compare_at_price > variant.price ) {
      productPrice.addClass("on-sale")
      comparePrice
        .html(Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}"))
        .show();
    } else {
      comparePrice.hide();
      productPrice.removeClass("on-sale");
    }
    {% if settings.use_color_swatch %}
    // BEGIN SWATCHES
      var form = jQuery('#' + selector.domIdPrefix).closest('form');
      for (var i=0,length=variant.options.length; i<length; i++) {
        var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
        if (radioButton.size()) {
          radioButton.get(0).checked = true;
        }
      }
     // END SWATCHES
     {% endif %}
  
    {% if section.settings.display_subtotal and product.available %}  
     updatePricing();
     {% endif %}
  
    {% if settings.enable_multiple_currencies %}
    Currency.convertAll('{{ shop.currency }}', jQuery('#currencies').val(), 'span.money', 'money_format');
    {% endif %}
          
  } else {
    // The variant doesn't exist. Just a safeguard for errors, but disable the submit button anyway
    addToCart.val(window.inventory_text.unavailable).addClass('disabled').attr('disabled', 'disabled');
  }

  //update variant inventory
  {% if section.settings.display_availability %}
  if (variant.available) {
    if (variant.inventory_management!=null) {
      jQuery(".product-inventory span").text(variant.inventory_quantity + " " + window.inventory_text.in_stock);
    } else {
      jQuery(".product-inventory span").text(window.inventory_text.many_in_stock);
    }
  } else {
    jQuery(".product-inventory span").text(window.inventory_text.out_of_stock);
  }
  {% endif %}
                                           
  /*begin variant image*/
  if (variant && variant.featured_image) {
      var originalImage = jQuery("#product-featured-image");
      var newImage = variant.featured_image;
      var element = originalImage[0];
      Shopify.Image.switchImage(newImage, element, function (newImageSizedSrc, newImage, element) {
        jQuery('#more-view-carousel img').each(function() {
          var grandSize = jQuery(this).attr('src');
          grandSize = grandSize.replace('compact','grande');
          if (grandSize == newImageSizedSrc) {
            jQuery(this).parent().trigger('click');              
            return false;
          }
        });
      });        
  }
  /*end of variant image*/
};

jQuery(function($) {
  {% if product.available and product.variants.size > 1 %}
    new Shopify.OptionSelectors('product-selectors', {
      product: {{ product | json }},
      onVariantSelected: selectCallback, 
    enableHistoryState: true
    });   
     
     {% comment %}
     Use color swatch and linked options (copyright by @carolineschnapp)
     {% endcomment %}
     {% if section.settings.use_color_swatch and product.available and product.options.size > 1 %}
     Shopify.linkOptionSelectors({{ product | json }});
     {% endif %} 
     
     {% if section.settings.use_color_swatch != true %}
      jQuery('.single-option-selector').selectize();
      jQuery('.selectize-input input').attr("disabled","disabled");
     {% endif %}

   {% endif %}
  
  // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
  {% endif %}

  // Hide selectors if we only have 1 variant and its title contains 'Default'.
  {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
    $('.selector-wrapper').hide();
  {% endif %}

  // Auto-select first available variant on page load. Otherwise the product looks sold out.
  {% assign found_one_in_stock = false %}
  {% for variant in product.variants %}
    {% if variant.available and found_one_in_stock == false %}
      {% assign found_one_in_stock = true %}
      {% for option in product.options %}
      $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }}).trigger('change');
      {% endfor %}
    {% endif %}
  {% endfor %}
  
  {% if section.settings.display_product_reviews %}  
    var reviewsTimeout = setInterval(function() {
      if (jQuery(".spr-badge-caption").length>0) {
    jQuery(".spr-badge-caption").on('click', function() {
          jQuery('html,body').animate({
            scrollTop: jQuery(".panel:last").offset().top},
              '400');
          jQuery("#collapse-tab4").collapse('show');
        });
        clearInterval(reviewsTimeout);
      }
    },1000);
    
  {% endif %}
 
});
</script>